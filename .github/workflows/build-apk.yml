name: Build Universal Connectivity DApp APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          zlib1g-dev \
          openjdk-17-jdk \
          unzip \
          zip \
          autoconf \
          automake \
          libtool \
          libtool-bin \
          pkg-config \
          libncurses6 \
          libstdc++6 \
          python3-pip \
          python3-dev \
          libffi-dev \
          libssl-dev \
          libltdl-dev \
          cmake \
          ccache \
          libgmp-dev \
          libmpfr-dev \
          libmpc-dev \
          rustc \
          cargo
    
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 11076708
        packages: 'platform-tools platforms;android-33 build-tools;33.0.2 ndk;25.2.9519653'
        accept-android-sdk-licenses: true
    
    - name: Verify Android SDK setup
      run: |
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_HOME: $ANDROID_HOME"
        ls -la $ANDROID_SDK_ROOT || true
        ls -la $ANDROID_SDK_ROOT/build-tools || true
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install --upgrade buildozer
        pip install --upgrade cython==0.29.36
        pip install --upgrade virtualenv
        # Pre-install some dependencies to speed up build
        pip install trio base58 protobuf janus trio-asyncio
    
    - name: Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: |
          ~/.buildozer
          ~/.gradle
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-global-
    
    - name: Cache Buildozer directory
      uses: actions/cache@v4
      with:
        path: .buildozer
        key: buildozer-local-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-local-
    
    - name: Make buildozer directory writable
      run: |
        mkdir -p ~/.buildozer/android/platform/android-sdk/licenses
        mkdir -p .buildozer
        sudo chmod -R 777 ~/.buildozer || true
        sudo chmod -R 777 .buildozer || true
    
    - name: Pre-accept all Android SDK licenses for Buildozer
      run: |
        # Create licenses directory in Buildozer's SDK location
        mkdir -p ~/.buildozer/android/platform/android-sdk/licenses
        
        # Accept all SDK licenses by creating license files
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > ~/.buildozer/android/platform/android-sdk/licenses/android-sdk-license
        echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> ~/.buildozer/android/platform/android-sdk/licenses/android-sdk-license
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> ~/.buildozer/android/platform/android-sdk/licenses/android-sdk-license
        
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > ~/.buildozer/android/platform/android-sdk/licenses/android-sdk-preview-license
        echo "504667f4c0de7af1a06de9f4b1727b84351f2910" >> ~/.buildozer/android/platform/android-sdk/licenses/android-sdk-preview-license
        
        echo "33b6a2b64607f11b759f320ef9dff4ae5c47d97a" > ~/.buildozer/android/platform/android-sdk/licenses/google-gdk-license
        
        echo "d975f751698a77b662f1254ddbeed3901e976f5a" > ~/.buildozer/android/platform/android-sdk/licenses/intel-android-extra-license
        
        echo "e9acab5b5fbb560a72cfaecce8946896ff6aab9d" > ~/.buildozer/android/platform/android-sdk/licenses/mips-android-sysimage-license
        
        # Create symlink to system SDK tools for buildozer (in both locations)
        mkdir -p ~/.buildozer/android/platform/android-sdk/tools/bin
        ln -sf /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager ~/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager
        ln -sf /usr/local/lib/android/sdk/cmdline-tools/latest/bin/avdmanager ~/.buildozer/android/platform/android-sdk/tools/bin/avdmanager
        
        # Also create in the system SDK location
        sudo mkdir -p /usr/local/lib/android/sdk/tools/bin
        sudo ln -sf /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager /usr/local/lib/android/sdk/tools/bin/sdkmanager
        sudo ln -sf /usr/local/lib/android/sdk/cmdline-tools/latest/bin/avdmanager /usr/local/lib/android/sdk/tools/bin/avdmanager
        
        echo "Buildozer SDK tools:"
        ls -la ~/.buildozer/android/platform/android-sdk/tools/bin/ || true
        echo "System SDK tools:"
        ls -la /usr/local/lib/android/sdk/tools/bin/ || true
    
    - name: Build APK with Buildozer
      run: |
        buildozer -v android debug 2>&1 | tee build.log
      continue-on-error: true
      env:
        ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
        ANDROID_HOME: /usr/local/lib/android/sdk
        ANDROIDSDK: /usr/local/lib/android/sdk
        ANDROIDNDK: /usr/local/lib/android/sdk/ndk/25.2.9519653
        ANDROIDAPI: 33
        ANDROIDNDKVER: 25b
        USE_SDK_WRAPPER: 1
        GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx2048m -Dorg.gradle.daemon=false"
    
    - name: Show build errors if failed
      if: failure()
      run: |
        echo "=== Last 200 lines of build log ==="
        tail -n 200 build.log || true
        echo "=== Searching for ERROR messages ==="
        grep -i "error" build.log | tail -n 50 || true
        echo "=== Searching for FAILED messages ==="
        grep -i "failed" build.log | tail -n 50 || true
    
    - name: List output files
      run: |
        echo "Contents of bin directory:"
        ls -la bin/ || echo "No bin directory"
        echo "Contents of .buildozer:"
        find .buildozer -name "*.apk" 2>/dev/null || echo "No APK files found"
    
    - name: Upload build log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-log-${{ github.sha }}
        path: build.log
        retention-days: 7
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: kivy-app-debug-${{ github.sha }}
        path: bin/*.apk
        retention-days: 30
    
    - name: Create Release (on tag push)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: bin/*.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}